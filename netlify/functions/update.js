const sendMessage = require("../../sendMessage");
const messageParts = require("../../messageParts");
const { commandHandlers, callbackHandlers } = require("../../commandHandlers");
const { answerCallbackQuery } = require("../../keyboardHelpers");

exports.handler = async (event) => {
  console.log("üì• Received an update from Telegram!");
  console.log("üîë BOT_TOKEN –¥–æ—Å—Ç—É–ø–µ–Ω:", !!process.env.BOT_TOKEN);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ (preflight)
  if (event.httpMethod === 'OPTIONS') {
    console.log('‚úÖ OPTIONS –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (event.httpMethod !== 'POST') {
    console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥:', event.httpMethod);
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const update = JSON.parse(event.body);
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram:', !!update);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
    if (!update || (!update.message && !update.callback_query)) {
      console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Invalid update' })
      };
    }

    console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message) {
      console.log('üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');
      await handleMessage(update.message);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries
    if (update.callback_query) {
      console.log('üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query');
      await handleCallbackQuery(update.callback_query);
    }

    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ ok: true })
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Internal server error' })
    };
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message) {
  if (!message.text) {
    return;
  }

  const { command, botName, extra } = messageParts(message.text);
  const chatId = message.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É
  const BOT_USERNAME = process.env.BOT_USERNAME || 'king_of_tokyo_bot';
  if (botName && botName !== BOT_USERNAME) {
    return; // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –¥—Ä—É–≥–æ–º—É –±–æ—Ç—É
  }

  console.log(`ü§ñ –ö–æ–º–∞–Ω–¥–∞: ${command}, extra: ${extra}`);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (command && commandHandlers[command]) {
    await commandHandlers[command](chatId, extra);
  } else if (command) {
    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
    await commandHandlers.help(chatId);
  } else {
    // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    const welcomeMessage = `
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ King of Tokio Bot!

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –∏–≥—Ä–µ King of Tokyo.

üé≤ *–ß—Ç–æ —è —É–º–µ—é:*
/random - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã

üí° *–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /random –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.
    `;
    await sendMessage(chatId, welcomeMessage.trim(), { parse_mode: 'Markdown' });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
async function handleCallbackQuery(callbackQuery) {
  console.log('üîò Callback query:', callbackQuery.data);
  
  try {
    const data = callbackQuery.data;
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await answerCallbackQuery(callbackQuery.id);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback queries
    if (data.startsWith('expansion_')) {
      const expansion = data.split('_')[1];
      await callbackHandlers.expansion(callbackQuery, expansion);
    } else if (data === 'continue_to_players') {
      await callbackHandlers.continue_to_players(callbackQuery);
    } else if (data.startsWith('players_')) {
      const playersCount = data.split('_')[1];
      await callbackHandlers.players(callbackQuery, playersCount);
    } else if (data.startsWith('options_')) {
      const [, playersCount, optionsCount] = data.split('_');
      await callbackHandlers.options(callbackQuery, playersCount, optionsCount);
    } else {
      console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query:', data);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:', error);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      await sendMessage(callbackQuery.message.chat.id, 
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    } catch (sendError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
    }
  }
}