const https = require('https');
require('dotenv').config();

async function makeRequest(url, options) {
  return new Promise((resolve, reject) => {
    const req = https.request(url, options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          resolve(result);
        } catch (error) {
          resolve(data);
        }
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    if (options.data) {
      req.write(options.data);
    }
    
    req.end();
  });
}

async function setupWebhook() {
  try {
    // URL –≤–µ–±—Ö—É–∫–∞ –Ω–∞ Vercel
    const webhookUrl = process.env.WEBHOOK_URL || 'https://your-app-name.vercel.app/api/webhook';
    
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞...');
    console.log(`üì° URL: ${webhookUrl}`);
    console.log(`ü§ñ Token: ${process.env.BOT_TOKEN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
    
    if (!process.env.BOT_TOKEN) {
      console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    const botToken = process.env.BOT_TOKEN;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —á–µ—Ä–µ–∑ Telegram API
    const setWebhookUrl = `https://api.telegram.org/bot${botToken}/setWebhook`;
    const webhookData = JSON.stringify({ url: webhookUrl });
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞...');
    
    const result = await makeRequest(setWebhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(webhookData)
      },
      data: webhookData
    });
    
    if (result.ok) {
      console.log('‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
      const getWebhookUrl = `https://api.telegram.org/bot${botToken}/getWebhookInfo`;
      const webhookInfo = await makeRequest(getWebhookUrl, {
        method: 'GET'
      });
      
      if (webhookInfo.ok) {
        console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ:');
        console.log(`   URL: ${webhookInfo.result.url}`);
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookInfo.result.last_error_message || '–ù–µ—Ç'}`);
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${webhookInfo.result.last_error_date || '–ù–µ—Ç'}`);
        console.log(`   –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.result.pending_update_count || 0}`);
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:', result.description);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
setupWebhook();
