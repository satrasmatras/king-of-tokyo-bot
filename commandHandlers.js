const CharacterRandomizer = require('./src/utils/characterRandomizer');
const sendMessage = require('./sendMessage');
const { editMessageText, createExpansionKeyboard, createPlayersKeyboard, createOptionsKeyboard } = require('./keyboardHelpers');

const randomizer = new CharacterRandomizer();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const chatStates = new Map();

const getChatState = (chatId) => {
  if (!chatStates.has(chatId)) {
    chatStates.set(chatId, {
      selectedExpansions: new Set(['core', 'powerUp', 'halloween', 'anubis'])
    });
  }
  return chatStates.get(chatId);
};

const clearChatState = (chatId) => {
  chatStates.delete(chatId);
};

const commandHandlers = {
  help: async (chatId) => {
    const helpMessage = `
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º King of Tokyo Bot*

üéÆ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:*
/random - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    `;

    await sendMessage(chatId, helpMessage.trim(), { parse_mode: 'Markdown' });
  },

  random: async (chatId) => {
    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä - –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    const currentState = getChatState(chatId);
    
    const message = `
üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞:
    `;

    const keyboard = createExpansionKeyboard(currentState.selectedExpansions);

    await sendMessage(chatId, message.trim(), { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  },


};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries
const callbackHandlers = {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  expansion: async (callbackQuery, expansion) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    
    const currentState = getChatState(chatId);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if (currentState.selectedExpansions.has(expansion)) {
      currentState.selectedExpansions.delete(expansion);
    } else {
      currentState.selectedExpansions.add(expansion);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    const message = `
üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞:
    `;
    
    const keyboard = createExpansionKeyboard(currentState.selectedExpansions);
    
    await editMessageText(chatId, messageId, message.trim(), keyboard);
  },

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä–æ–∫–æ–≤
  continue_to_players: async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    
    const currentState = getChatState(chatId);
    
    if (currentState.selectedExpansions.size === 0) {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–≥—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      currentState.selectedExpansions.add('core');
    }
    
    const selectedExpansionsList = Array.from(currentState.selectedExpansions).map(exp => {
      const names = {
        core: "üéÆ –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞",
        powerUp: "‚ö° Power Up!",
        halloween: "üéÉ Halloween",
        anubis: "üè∫ –ê–Ω—É–±–∏—Å"
      };
      return names[exp] || exp;
    }).join(", ");
    
    const message = `
üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*

‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${selectedExpansionsList}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:
    `;
    
    const keyboard = createPlayersKeyboard();
    
    await editMessageText(chatId, messageId, message.trim(), keyboard);
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
  players: async (callbackQuery, playersCount) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    
    const message = `
üë• *–í—ã–±—Ä–∞–Ω–æ ${playersCount} –∏–≥—Ä–æ–∫–æ–≤*

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞:
    `;
    
    const keyboard = createOptionsKeyboard(playersCount);
    
    await editMessageText(chatId, messageId, message.trim(), keyboard);
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  options: async (callbackQuery, playersCount, optionsCount) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    
    const players = parseInt(playersCount);
    const options = parseInt(optionsCount);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    const currentState = getChatState(chatId);
    const selectedExpansions = Array.from(currentState.selectedExpansions);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
    let availableCharacters = randomizer.availableCharacters.filter(character => {
      if (!character.expansion) {
        return selectedExpansions.includes('core');
      }
      return selectedExpansions.includes(character.expansion.toLowerCase());
    });
    
    // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ—Ö
    if (availableCharacters.length < players * options) {
      availableCharacters = randomizer.availableCharacters;
    }
    
    const usedCharacters = new Set();
    const playerAssignments = [];
    
    for (let i = 0; i < players; i++) {
      const playerOptions = [];
      
      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞
      for (let j = 0; j < options; j++) {
        let availableChars = availableCharacters.filter(char => !usedCharacters.has(char.name));
        
        if (availableChars.length === 0) {
          // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
          usedCharacters.clear();
          availableChars = availableCharacters;
        }
        
        const randomChar = availableChars[Math.floor(Math.random() * availableChars.length)];
        playerOptions.push(randomChar);
        usedCharacters.add(randomChar.name);
      }
      
      playerAssignments.push(playerOptions);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const selectedExpansionsList = selectedExpansions.map(exp => {
      const names = {
        core: "üéÆ –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞",
        powerUp: "‚ö° Power Up!",
        halloween: "üéÉ Halloween",
        anubis: "üè∫ –ê–Ω—É–±–∏—Å"
      };
      return names[exp] || exp;
    }).join(", ");
    
    let message = `üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*\n\n`;
    message += `‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${selectedExpansionsList}\n`;
    message += `üë• –ò–≥—Ä–æ–∫–æ–≤: ${players}\n`;
    message += `üéØ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∏–≥—Ä–æ–∫–∞: ${options}\n\n`;
    
    playerAssignments.forEach((playerOptions, index) => {
      message += `*–ò–≥—Ä–æ–∫ ${index + 1}:*\n`;
      playerOptions.forEach((character, charIndex) => {
        const expansion = character.expansion ? ` (${character.expansion})` : '';
        const emoji = character.emoji || 'üé≠';
        message += `${charIndex + 1}. ${emoji} *${character.name}*${expansion}\n   ${character.description}\n`;
      });
      message += `\n`;
    });
    
    message += `–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üêâ`;
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    clearChatState(chatId);
    
    await editMessageText(chatId, messageId, message.trim());
  }
};

module.exports = { commandHandlers, callbackHandlers, getChatState, clearChatState };
