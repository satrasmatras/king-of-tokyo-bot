const CharacterRandomizer = require('../utils/characterRandomizer');

class MessageHandler {
  constructor(bot) {
    this.bot = bot;
    this.randomizer = new CharacterRandomizer();
    this.expansionStates = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
  getExpansionState(chatId) {
    if (!this.expansionStates.has(chatId)) {
      this.expansionStates.set(chatId, {
        selectedExpansions: new Set(['core', 'powerUp', 'halloween', 'anubis']) // –í—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      });
    }
    return this.expansionStates.get(chatId);
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
  clearExpansionState(chatId) {
    this.expansionStates.delete(chatId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  async handleStart(msg) {
    const chatId = msg.chat.id;
    const welcomeMessage = `
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ King of Tokio Bot!

–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –∏–≥—Ä–µ King of Tokyo. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:*
/random - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã
/random2 - –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã
/characters - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
/expansions - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–≥—Ä—ã

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /characters –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
‚Ä¢ /expansions –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å

–ù–∞—á–Ω–∏—Ç–µ —Å –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! üêâ
    `;
    
    await this.bot.sendMessage(chatId, welcomeMessage.trim(), { parse_mode: 'Markdown' });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  async handleHelp(msg) {
    const chatId = msg.chat.id;
    const helpMessage = `
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º King of Tokyo Bot*

üéÆ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:*
/random - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã
/random2 - –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã
/characters - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
/expansions - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–≥—Ä—ã

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–≥—Ä–æ–∫–æ–≤
‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /characters –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
‚Ä¢ /expansions –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å
    `;
    
    await this.bot.sendMessage(chatId, helpMessage.trim(), { parse_mode: 'Markdown' });
  }



  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /expansions
  async handleExpansions(msg) {
    const chatId = msg.chat.id;
    const expansionsList = this.randomizer.getExpansionsList();
    
    const message = `
üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:*

${expansionsList}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!
    `;
    
    await this.bot.sendMessage(chatId, message.trim(), { parse_mode: 'Markdown' });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  async handleExpansionSelection(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const expansion = callbackQuery.data.split('_')[1];
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    const currentState = this.getExpansionState(chatId);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if (currentState.selectedExpansions.has(expansion)) {
      currentState.selectedExpansions.delete(expansion);
    } else {
      currentState.selectedExpansions.add(expansion);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    const message = `
üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞:
    `;
    
    const keyboard = {
      inline_keyboard: [
        [
          { 
            text: currentState.selectedExpansions.has('core') ? "‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞" : "‚ùå –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞", 
            callback_data: "expansion_core" 
          },
          { 
            text: currentState.selectedExpansions.has('powerUp') ? "‚úÖ Power Up!" : "‚ùå Power Up!", 
            callback_data: "expansion_powerUp" 
          }
        ],
        [
          { 
            text: currentState.selectedExpansions.has('halloween') ? "‚úÖ Halloween" : "‚ùå Halloween", 
            callback_data: "expansion_halloween" 
          },
          { 
            text: currentState.selectedExpansions.has('anubis') ? "‚úÖ –ê–Ω—É–±–∏—Å" : "‚ùå –ê–Ω—É–±–∏—Å", 
            callback_data: "expansion_anubis" 
          }
        ],

        [
          { text: "üéØ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "continue_to_players" }
        ]
      ]
    };
    
    await this.bot.editMessageText(message.trim(), {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä–æ–∫–æ–≤
  async handleContinueToPlayers(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    
    const currentState = this.getExpansionState(chatId);
    
    if (currentState.selectedExpansions.size === 0) {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–≥—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      currentState.selectedExpansions.add('core');
    }
    
    const selectedExpansionsList = Array.from(currentState.selectedExpansions).map(exp => {
      const names = {
        core: "–ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞",
        powerUp: "Power Up!",
        halloween: "Halloween",
        anubis: "–ê–Ω—É–±–∏—Å"
      };
      return names[exp] || exp;
    }).join(", ");
    
    const message = `
üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*

‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${selectedExpansionsList}

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:
    `;
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: "2 –∏–≥—Ä–æ–∫–∞", callback_data: "players_2" },
          { text: "3 –∏–≥—Ä–æ–∫–∞", callback_data: "players_3" }
        ],
        [
          { text: "4 –∏–≥—Ä–æ–∫–∞", callback_data: "players_4" },
          { text: "5 –∏–≥—Ä–æ–∫–æ–≤", callback_data: "players_5" }
        ],
        [
          { text: "6 –∏–≥—Ä–æ–∫–æ–≤", callback_data: "players_6" }
        ]
      ]
    };
    
    await this.bot.editMessageText(message.trim(), {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
  async handlePlayersSelection(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const playersCount = parseInt(callbackQuery.data.split('_')[1]);
    
    const message = `
üë• *–í—ã–±—Ä–∞–Ω–æ ${playersCount} –∏–≥—Ä–æ–∫–æ–≤*

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞:
    `;
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: "1 –≤–∞—Ä–∏–∞–Ω—Ç", callback_data: `options_${playersCount}_1` },
          { text: "2 –≤–∞—Ä–∏–∞–Ω—Ç–∞", callback_data: `options_${playersCount}_2` }
        ]
      ]
    };
    
    await this.bot.editMessageText(message.trim(), {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  async handleOptionsSelection(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const [, playersCount, optionsCount] = callbackQuery.data.split('_');
    
    const players = parseInt(playersCount);
    const options = parseInt(optionsCount);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    const currentState = this.getExpansionState(chatId);
    const selectedExpansions = Array.from(currentState.selectedExpansions);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
    let availableCharacters = this.randomizer.availableCharacters.filter(character => {
      if (!character.expansion) {
        return selectedExpansions.includes('core');
      }
      return selectedExpansions.includes(character.expansion.toLowerCase());
    });
    
    // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ—Ö
    if (availableCharacters.length < players * options) {
      availableCharacters = this.randomizer.availableCharacters;
    }
    
    const usedCharacters = new Set();
    const playerAssignments = [];
    
    for (let i = 0; i < players; i++) {
      const playerOptions = [];
      
      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞
      for (let j = 0; j < options; j++) {
        let availableChars = availableCharacters.filter(char => !usedCharacters.has(char.name));
        
        if (availableChars.length === 0) {
          // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
          usedCharacters.clear();
          availableChars = availableCharacters;
        }
        
        const randomChar = availableChars[Math.floor(Math.random() * availableChars.length)];
        playerOptions.push(randomChar);
        usedCharacters.add(randomChar.name);
      }
      
      playerAssignments.push(playerOptions);
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const selectedExpansionsList = selectedExpansions.map(exp => {
      const names = {
        core: "–ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞",
        powerUp: "Power Up!",
        halloween: "Halloween",
        anubis: "–ê–Ω—É–±–∏—Å"
      };
      return names[exp] || exp;
    }).join(", ");
    
    let message = `üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*\n\n`;
    message += `‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${selectedExpansionsList}\n`;
    message += `üë• –ò–≥—Ä–æ–∫–æ–≤: ${players}\n`;
    message += `üéØ –í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∏–≥—Ä–æ–∫–∞: ${options}\n\n`;
    
    playerAssignments.forEach((playerOptions, index) => {
      message += `*–ò–≥—Ä–æ–∫ ${index + 1}:*\n`;
      playerOptions.forEach((character, charIndex) => {
        const expansion = character.expansion ? ` (${character.expansion})` : '';
        message += `${charIndex + 1}. ${character.name}${expansion} - ${character.description}\n`;
      });
      message += `\n`;
    });
    
    message += `–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã! üêâ`;
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    this.clearExpansionState(chatId);
    
    await this.bot.editMessageText(message.trim(), {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown'
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  async handleUnknown(msg) {
    const chatId = msg.chat.id;
    const unknownMessage = `
‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    `;
    
    await this.bot.sendMessage(chatId, unknownMessage.trim());
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random
  async handleRandom(msg) {
    const chatId = msg.chat.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    const currentState = this.getExpansionState(chatId);
    
    const message = `
üé≤ *–†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä–∞:
    `;
    
    const keyboard = {
      inline_keyboard: [
        [
          { 
            text: currentState.selectedExpansions.has('core') ? "‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞" : "‚ùå –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞", 
            callback_data: "expansion_core" 
          },
          { 
            text: currentState.selectedExpansions.has('powerUp') ? "‚úÖ Power Up!" : "‚ùå Power Up!", 
            callback_data: "expansion_powerUp" 
          }
        ],
        [
          { 
            text: currentState.selectedExpansions.has('halloween') ? "‚úÖ Halloween" : "‚ùå Halloween", 
            callback_data: "expansion_halloween" 
          },
          { 
            text: currentState.selectedExpansions.has('anubis') ? "‚úÖ –ê–Ω—É–±–∏—Å" : "‚ùå –ê–Ω—É–±–∏—Å", 
            callback_data: "expansion_anubis" 
          }
        ],

        [
          { text: "üéØ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data: "continue_to_players" }
        ]
      ]
    };
    
    await this.bot.sendMessage(chatId, message.trim(), { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random2
  async handleRandom2(msg) {
    const chatId = msg.chat.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    const currentState = this.getExpansionState(chatId);
    
    const message = `
üé≤ *–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞*

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:
    `;
    
    const keyboard = {
      inline_keyboard: [
        [
          { text: "2 –∏–≥—Ä–æ–∫–∞", callback_data: "players_2" },
          { text: "3 –∏–≥—Ä–æ–∫–∞", callback_data: "players_3" }
        ],
        [
          { text: "4 –∏–≥—Ä–æ–∫–∞", callback_data: "players_4" },
          { text: "5 –∏–≥—Ä–æ–∫–æ–≤", callback_data: "players_5" }
        ],
        [
          { text: "6 –∏–≥—Ä–æ–∫–æ–≤", callback_data: "players_6" }
        ]
      ]
    };
    
    await this.bot.sendMessage(chatId, message.trim(), { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /characters
  async handleCharacters(msg) {
    const chatId = msg.chat.id;
    const charactersList = this.randomizer.getCharactersList();
    
    let message = `üìã *–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:*\n\n`;
    
    Object.entries(charactersList).forEach(([expansion, characters]) => {
      const expansionNames = {
        core: "üéÆ –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞ (Core Characters)",

        halloween: "üéÉ Halloween",
        powerUp: "‚ö° Power Up!",
        anubis: "üè∫ –ê–Ω—É–±–∏—Å"
      };
      
      message += `*${expansionNames[expansion] || expansion}:*\n`;
      characters.forEach((character, index) => {
        message += `${index + 1}. ${character}\n`;
      });
      message += `\n`;
    });
    
    message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /random –∏–ª–∏ /random2 –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞!`;
    
    await this.bot.sendMessage(chatId, message.trim(), { parse_mode: 'Markdown' });
  }



  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from.username || msg.from.first_name}: ${text}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const response = `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "${text}"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.`;
    await this.bot.sendMessage(chatId, response);
  }
}

module.exports = MessageHandler;
