const { getAllCharacters, getCharactersByExpansion, getAvailableExpansions } = require('../data/characters');

class CharacterRandomizer {
  constructor() {
    this.availableCharacters = getAllCharacters();
    this.availableExpansions = getAvailableExpansions();
  }

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ (–∞–ª–≥–æ—Ä–∏—Ç–º –§–∏—à–µ—Ä–∞-–ô–µ–π—Ç—Å–∞)
  shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  getRandomCharacters(count = 1, expansions = null) {
    let charactersToChooseFrom = this.availableCharacters;

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    if (expansions && expansions.length > 0) {
      charactersToChooseFrom = this.availableCharacters.filter(character => {
        // –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –∏–º–µ—é—Ç –ø–æ–ª—è expansion
        if (!character.expansion) {
          return expansions.includes('base');
        }
        return expansions.includes(character.expansion.toLowerCase());
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    if (charactersToChooseFrom.length < count) {
      count = charactersToChooseFrom.length;
    }

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const shuffled = this.shuffleArray(charactersToChooseFrom);
    return shuffled.slice(0, count);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏
  getRandomCharactersWithExclusions(count = 1, exclusions = [], expansions = null) {
    let charactersToChooseFrom = this.availableCharacters;

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
    if (expansions && expansions.length > 0) {
      charactersToChooseFrom = charactersToChooseFrom.filter(character => {
        if (!character.expansion) {
          return expansions.includes('base');
        }
        return expansions.includes(character.expansion.toLowerCase());
      });
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    charactersToChooseFrom = charactersToChooseFrom.filter(character => 
      !exclusions.includes(character.name)
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    if (charactersToChooseFrom.length < count) {
      count = charactersToChooseFrom.length;
    }

    const shuffled = this.shuffleArray(charactersToChooseFrom);
    return shuffled.slice(0, count);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
  getCharactersList() {
    const result = {};
    
    this.availableExpansions.forEach(expansion => {
      const characters = this.availableCharacters.filter(character => {
        if (expansion === 'core') {
          return !character.expansion;
        }
        return character.expansion && character.expansion.toLowerCase() === expansion;
      });
      
      result[expansion] = characters.map(char => char.name);
    });

    return result;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
  getCharacterInfo(characterName) {
    return this.availableCharacters.find(character => 
      character.name.toLowerCase() === characterName.toLowerCase()
    );
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
  formatCharacter(character) {
    const expansion = character.expansion ? ` (${character.expansion})` : '';
    return `
üé≠ *${character.name}*${expansion}
üìù ${character.description}
    `.trim();
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  formatCharactersList(characters) {
    if (characters.length === 0) {
      return "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
    }

    return characters.map((character, index) => {
      const expansion = character.expansion ? ` (${character.expansion})` : '';
      return `${index + 1}. *${character.name}*${expansion} - ${character.description}`;
    }).join('\n');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
  getExpansionsList() {
    const expansionNames = {
      core: "üéÆ –ë–∞–∑–æ–≤–∞—è –∏–≥—Ä–∞ (Core Characters)",
      halloween: "üéÉ Halloween",
      powerUp: "‚ö° Power Up!",
      anubis: "üè∫ –ê–Ω—É–±–∏—Å"
    };

    return this.availableExpansions.map(expansion => 
      `‚Ä¢ ${expansionNames[expansion] || expansion}`
    ).join('\n');
  }
}

module.exports = CharacterRandomizer;
