const TelegramBot = require('node-telegram-bot-api');
const MessageHandler = require('./handlers/messageHandler');
const config = require('./config');

class Bot {
  constructor() {
    this.bot = new TelegramBot(config.bot.token, { polling: true });
    this.messageHandler = new MessageHandler(this.bot);
    this.setupEventHandlers();
  }

  setupEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.onText(/\/start/, async (msg) => {
      try {
        await this.messageHandler.handleStart(msg);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
        await this.handleError(msg.chat.id, error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.onText(/\/help/, async (msg) => {
      try {
        await this.messageHandler.handleHelp(msg);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help:', error);
        await this.handleError(msg.chat.id, error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random
    this.bot.onText(/\/random/, async (msg) => {
      try {
        await this.messageHandler.handleRandom(msg);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /random:', error);
        await this.handleError(msg.chat.id, error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random2
    this.bot.onText(/\/random2/, async (msg) => {
      try {
        await this.messageHandler.handleRandom2(msg);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /random2:', error);
        await this.handleError(msg.chat.id, error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /characters
    this.bot.onText(/\/characters/, async (msg) => {
      try {
        await this.messageHandler.handleCharacters(msg);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /characters:', error);
        await this.handleError(msg.chat.id, error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /expansions
    this.bot.onText(/\/expansions/, async (msg) => {
      try {
        await this.messageHandler.handleExpansions(msg);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /expansions:', error);
        await this.handleError(msg.chat.id, error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    this.bot.on('callback_query', async (callbackQuery) => {
      try {
        const data = callbackQuery.data;
        
        if (data.startsWith('expansion_')) {
          await this.messageHandler.handleExpansionSelection(callbackQuery);
        } else if (data === 'continue_to_players') {
          await this.messageHandler.handleContinueToPlayers(callbackQuery);
        } else if (data.startsWith('players_')) {
          await this.messageHandler.handlePlayersSelection(callbackQuery);
        } else if (data.startsWith('options_')) {
          await this.messageHandler.handleOptionsSelection(callbackQuery);
        }
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await this.bot.answerCallbackQuery(callbackQuery.id);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:', error);
        await this.handleError(callbackQuery.message.chat.id, error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      try {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        if (msg.text && !msg.text.startsWith('/')) {
          await this.messageHandler.handleMessage(msg);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await this.handleError(msg.chat.id, error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ polling –æ—à–∏–±–æ–∫
    this.bot.on('polling_error', (error) => {
      console.error('–û—à–∏–±–∫–∞ polling:', error);
    });
  }



  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  async handleError(chatId, error) {
    const errorMessage = `
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

–û—à–∏–±–∫–∞: ${error.message}
    `;
    
    try {
      await this.bot.sendMessage(chatId, errorMessage.trim());
    } catch (sendError) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', sendError);
    }
  }

  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  start() {
    console.log('ü§ñ King of Tokio Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
    console.log(`üì± –ë–æ—Ç: @${config.bot.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    this.bot.getMe().then((botInfo) => {
      console.log(`ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:`);
      console.log(`   –ò–º—è: ${botInfo.first_name}`);
      console.log(`   Username: @${botInfo.username}`);
      console.log(`   ID: ${botInfo.id}`);
    }).catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
    });
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    this.bot.stopPolling();
    console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

module.exports = Bot;
