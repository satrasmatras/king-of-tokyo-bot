const TelegramBot = require('node-telegram-bot-api');
const MessageHandler = require('../src/handlers/messageHandler');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  throw new Error('BOT_TOKEN is required');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –±–µ–∑ polling
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });
const messageHandler = new MessageHandler(bot);

console.log('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º:', process.env.BOT_TOKEN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers() {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, async (msg) => {
    try {
      await messageHandler.handleStart(msg);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
      await handleError(msg.chat.id, error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  bot.onText(/\/help/, async (msg) => {
    try {
      await messageHandler.handleHelp(msg);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help:', error);
      await handleError(msg.chat.id, error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random
  bot.onText(/\/random/, async (msg) => {
    try {
      await messageHandler.handleRandom(msg);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /random:', error);
      await handleError(msg.chat.id, error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random2
  bot.onText(/\/random2/, async (msg) => {
    try {
      await messageHandler.handleRandom2(msg);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /random2:', error);
      await handleError(msg.chat.id, error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /characters
  bot.onText(/\/characters/, async (msg) => {
    try {
      await messageHandler.handleCharacters(msg);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /characters:', error);
      await handleError(msg.chat.id, error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /expansions
  bot.onText(/\/expansions/, async (msg) => {
    try {
      await messageHandler.handleExpansions(msg);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /expansions:', error);
      await handleError(msg.chat.id, error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (callbackQuery) => {
    try {
      const data = callbackQuery.data;
      
      if (data.startsWith('expansion_')) {
        await messageHandler.handleExpansionSelection(callbackQuery);
      } else if (data === 'continue_to_players') {
        await messageHandler.handleContinueToPlayers(callbackQuery);
      } else if (data.startsWith('players_')) {
        await messageHandler.handlePlayersSelection(callbackQuery);
      } else if (data.startsWith('options_')) {
        await messageHandler.handleOptionsSelection(callbackQuery);
      }
      
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback query:', error);
      await handleError(callbackQuery.message.chat.id, error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', async (msg) => {
    try {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
      if (msg.text && !msg.text.startsWith('/')) {
        await messageHandler.handleMessage(msg);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      await handleError(msg.chat.id, error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
  });

  bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async function handleError(chatId, error) {
  try {
    const errorMessage = `
‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.

–û—à–∏–±–∫–∞: ${error.message}
    `;
    await bot.sendMessage(chatId, errorMessage.trim(), { parse_mode: 'Markdown' });
  } catch (sendError) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
setupEventHandlers();

// API endpoint –¥–ª—è Vercel
module.exports = async (req, res) => {
  console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.method, req.url);
  console.log('üîë BOT_TOKEN –¥–æ—Å—Ç—É–ø–µ–Ω:', !!process.env.BOT_TOKEN);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ (preflight)
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ OPTIONS –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    res.status(200).end();
    return;
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥:', req.method);
    res.status(405).json({ error: 'Method not allowed' });
    return;
  }

  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –æ—Ç Telegram
    const update = req.body;
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram:', update ? '–î–∞' : '–ù–µ—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
    if (!update || !update.message && !update.callback_query) {
      console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      res.status(400).json({ error: 'Invalid update' });
      return;
    }

    console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
    
    // –≠–º—É–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –±–æ—Ç–∞
    if (update.message) {
      console.log('üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');
      bot.emit('message', update.message);
    }
    
    if (update.callback_query) {
      console.log('üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query');
      bot.emit('callback_query', update.callback_query);
    }

    // –û—Ç–≤–µ—á–∞–µ–º —É—Å–ø–µ—Ö–æ–º
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
